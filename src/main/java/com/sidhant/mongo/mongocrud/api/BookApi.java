/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sidhant.mongo.mongocrud.api;

import java.math.BigDecimal;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.sidhant.mongo.mongocrud.type.BookObject;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-10-23T01:52:35.045Z[GMT]")
@Validated
public interface BookApi {

	@Operation(summary = "Add a new Book to the store", description = "Add a new Book to the store", tags = { "Book" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BookObject.class))),

			@ApiResponse(responseCode = "405", description = "Invalid input") })
	@RequestMapping(value = "/book", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<BookObject> addBook(
			@Parameter(in = ParameterIn.DEFAULT, description = "Create a new Book in the store", required = true, schema = @Schema()) @Valid @RequestBody BookObject body);

	@Operation(summary = "Deletes Book", description = "delete Book", tags = { "Book" })
	@ApiResponses(value = { @ApiResponse(responseCode = "200", description = "Deleted Successfully"),

			@ApiResponse(responseCode = "400", description = "Invalid Book value") })
	@RequestMapping(value = "/book/{BookId}", method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteBook(
			@Parameter(in = ParameterIn.PATH, description = "Book id to delete", required = true, schema = @Schema()) @PathVariable("BookId") BigDecimal bookId);

	@Operation(summary = "Find Book by ID", description = "Returns a single Book", tags = { "Book" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BookObject.class))),

			@ApiResponse(responseCode = "400", description = "Invalid ID supplied"),

			@ApiResponse(responseCode = "404", description = "Book not found") })
	@RequestMapping(value = "/book/{BookId}", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<BookObject> getBookById(
			@Parameter(in = ParameterIn.PATH, description = "ID of Book to return", required = true, schema = @Schema()) @PathVariable("BookId") BigDecimal bookId);

	@Operation(summary = "Add a new Book to the store", description = "Add a new Book to the store", tags = { "Book" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BookObject.class))),

			@ApiResponse(responseCode = "405", description = "Invalid input") })
	@RequestMapping(value = "/book", produces = { "application/json" }, method = RequestMethod.GET)
	ResponseEntity<BookObject> getBooks();

	@Operation(summary = "Update an existing Book", description = "Update an existing Book by Id", tags = { "Book" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BookObject.class))),

			@ApiResponse(responseCode = "400", description = "Invalid ID supplied"),

			@ApiResponse(responseCode = "404", description = "Book not found"),

			@ApiResponse(responseCode = "405", description = "Validation exception") })
	@RequestMapping(value = "/book", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<BookObject> updateBook(
			@Parameter(in = ParameterIn.DEFAULT, description = "Update an existent Book in the store", required = true, schema = @Schema()) @Valid @RequestBody BookObject body);

}
